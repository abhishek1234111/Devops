pipeline {
    agent {
        label 'slave'  // Label for the slave node
    }
    environment {
        DOCKER_IMAGE = 'my-php-webapp'
        REPO_URL = 'https://github.com/your_username/your_repository.git'
        CONTAINER_NAME = 'php_webapp'
        ANSIBLE_PLAYBOOK = 'install_docker.yml'
    }
    stages {
        stage('Install and Configure Puppet Agent') {
            steps {
                script {
                    try {
                        sh 'sudo apt update'
                        sh 'sudo apt install -y puppet-agent'
                        sh 'sudo systemctl start puppet'
                        sh 'sudo systemctl enable puppet'
                    } catch (Exception e) {
                        error("Failed to install and configure Puppet agent: ${e.message}")
                    }
                }
            }
        }
        stage('Install Docker Using Ansible') {
            steps {
                script {
                    writeFile file: "${ANSIBLE_PLAYBOOK}", text: '''
                    ---
                    - name: Install Docker
                      hosts: localhost
                      become: yes
                      tasks:
                        - name: Update the package list
                          apt:
                            update_cache: yes

                        - name: Install Docker
                          apt:
                            name: docker.io
                            state: present

                        - name: Ensure Docker is started and enabled
                          systemd:
                            name: docker
                            state: started
                            enabled: yes
                    '''
                    sh "ansible-playbook ${ANSIBLE_PLAYBOOK}"
                }
            }
        }
        stage('Pull PHP Website and Build Docker Container') {
            steps {
                script {
                    try {
                        sh "git clone ${REPO_URL}"
                        sh "cd your_repository_directory && docker build -t ${DOCKER_IMAGE} ."
                        sh "docker run -d --name ${CONTAINER_NAME} -p 80:80 ${DOCKER_IMAGE}"
                    } catch (Exception e) {
                        error("Failed to build and run the Docker container: ${e.message}")
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                try {
                    sh "docker rm -f ${CONTAINER_NAME} || true"
                } catch (Exception e) {
                    error("Failed to remove the running container after job failure: ${e.message}")
                }
            }
        }
    }
}
